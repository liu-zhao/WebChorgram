-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from GGGrammar.y
-----------------------------------------------------------------------------


terminal '[' is unused
terminal ']' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_gggrammar -> G                              (0)
	G -> '§'                                           (1)
	G -> str '->' str ':' str                          (2)
	G -> str '=>' ptps ':' str                         (3)
	G -> G '|' G                                       (4)
	G -> G '+' G                                       (5)
	G -> G ';' G                                       (6)
	G -> '*' G '@' str                                 (7)
	G -> '(' G ')'                                     (8)
	ptps -> str                                        (9)
	ptps -> str ',' ptps                               (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	str            { TokenStr $$ }
	'§'            { TokenEmp }
	'->'           { TokenArr }
	'=>'           { TokenMAr }
	'|'            { TokenPar }
	'+'            { TokenBra }
	'*'            { TokenSta }
	';'            { TokenSeq }
	'@'            { TokenUnt }
	':'            { TokenSec }
	'('            { TokenBro }
	')'            { TokenBrc }
	','            { TokenCom }
	'['            { TokenCtb }
	']'            { TokenCte }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_gggrammar rule  0
	G               rules 1, 2, 3, 4, 5, 6, 7, 8
	ptps            rules 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 3

State 1


	'§'            shift, and enter state 2


State 2

	G -> '§' .                                          (rule 1)

	'|'            reduce using rule 1
	'+'            reduce using rule 1
	';'            reduce using rule 1
	'@'            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_gggrammar -> G .                             (rule 0)
	G -> G . '|' G                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G . ';' G                                      (rule 6)

	'|'            shift, and enter state 11
	'+'            shift, and enter state 12
	';'            shift, and enter state 13
	%eof           accept


State 4

	G -> str . '->' str ':' str                         (rule 2)
	G -> str . '=>' ptps ':' str                        (rule 3)

	'->'           shift, and enter state 9
	'=>'           shift, and enter state 10


State 5

	G -> '*' . G '@' str                                (rule 7)

	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 8

State 6

	G -> '(' . G ')'                                    (rule 8)

	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 7

State 7

	G -> G . '|' G                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G . ';' G                                      (rule 6)
	G -> '(' G . ')'                                    (rule 8)

	'|'            shift, and enter state 11
	'+'            shift, and enter state 12
	';'            shift, and enter state 13
	')'            shift, and enter state 21


State 8

	G -> G . '|' G                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G . ';' G                                      (rule 6)
	G -> '*' G . '@' str                                (rule 7)

	'|'            shift, and enter state 11
	'+'            shift, and enter state 12
	';'            shift, and enter state 13
	'@'            shift, and enter state 20


State 9

	G -> str '->' . str ':' str                         (rule 2)

	str            shift, and enter state 19


State 10

	G -> str '=>' . ptps ':' str                        (rule 3)

	str            shift, and enter state 18

	ptps           goto state 17

State 11

	G -> G '|' . G                                      (rule 4)

	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 16

State 12

	G -> G '+' . G                                      (rule 5)

	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 15

State 13

	G -> G ';' . G                                      (rule 6)

	str            shift, and enter state 4
	'§'            shift, and enter state 2
	'*'            shift, and enter state 5
	'('            shift, and enter state 6

	G              goto state 14

State 14

	G -> G . '|' G                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G . ';' G                                      (rule 6)
	G -> G ';' G .                                      (rule 6)

	'|'            reduce using rule 6
	'+'            reduce using rule 6
	';'            shift, and enter state 13
	'@'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 15

	G -> G . '|' G                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G '+' G .                                      (rule 5)
	G -> G . ';' G                                      (rule 6)

	'|'            reduce using rule 5
	'+'            shift, and enter state 12
	';'            shift, and enter state 13
	'@'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 16

	G -> G . '|' G                                      (rule 4)
	G -> G '|' G .                                      (rule 4)
	G -> G . '+' G                                      (rule 5)
	G -> G . ';' G                                      (rule 6)

	'|'            shift, and enter state 11
	'+'            shift, and enter state 12
	';'            shift, and enter state 13
	'@'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 17

	G -> str '=>' ptps . ':' str                        (rule 3)

	':'            shift, and enter state 25


State 18

	ptps -> str .                                       (rule 9)
	ptps -> str . ',' ptps                              (rule 10)

	':'            reduce using rule 9
	','            shift, and enter state 24


State 19

	G -> str '->' str . ':' str                         (rule 2)

	':'            shift, and enter state 23


State 20

	G -> '*' G '@' . str                                (rule 7)

	str            shift, and enter state 22


State 21

	G -> '(' G ')' .                                    (rule 8)

	'|'            reduce using rule 8
	'+'            reduce using rule 8
	';'            reduce using rule 8
	'@'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 22

	G -> '*' G '@' str .                                (rule 7)

	'|'            reduce using rule 7
	'+'            reduce using rule 7
	';'            reduce using rule 7
	'@'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 23

	G -> str '->' str ':' . str                         (rule 2)

	str            shift, and enter state 28


State 24

	ptps -> str ',' . ptps                              (rule 10)

	str            shift, and enter state 18

	ptps           goto state 27

State 25

	G -> str '=>' ptps ':' . str                        (rule 3)

	str            shift, and enter state 26


State 26

	G -> str '=>' ptps ':' str .                        (rule 3)

	'|'            reduce using rule 3
	'+'            reduce using rule 3
	';'            reduce using rule 3
	'@'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 27

	ptps -> str ',' ptps .                              (rule 10)

	':'            reduce using rule 10


State 28

	G -> str '->' str ':' str .                         (rule 2)

	'|'            reduce using rule 2
	'+'            reduce using rule 2
	';'            reduce using rule 2
	'@'            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 15
Number of non-terminals: 3
Number of states: 29

-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from SystemGrammar.y
-----------------------------------------------------------------------------


terminal '|' is unused
terminal '[' is unused
terminal ']' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_sysgrammar -> Sys                           (0)
	Sys -> "system" str "of" ptps ':' Mdec             (1)
	Mdec -> D                                          (2)
	Mdec -> D "||" Mdec                                (3)
	D -> str '=' M                                     (4)
	M -> cho                                           (5)
	M -> '*' cho                                       (6)
	cho -> B                                           (7)
	cho -> cho '+' B                                   (8)
	B -> pre ';' cho                                   (9)
	B -> pre ';' "end"                                 (10)
	B -> pre                                           (11)
	B -> pre ';'                                       (12)
	B -> pre "do" str                                  (13)
	B -> '(' M ')'                                     (14)
	pre -> str '!' str                                 (15)
	pre -> str '?' str                                 (16)
	pre -> "tau" str                                   (17)
	pre -> "tau"                                       (18)
	ptps -> str                                        (19)
	ptps -> str ',' ptps                               (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	str            { TokenStr $$ }
	'='            { TokenEqu }
	"||"           { TokenDec }
	':'            { TokenBod }
	'!'            { TokenSnd }
	'?'            { TokenRcv }
	'|'            { TokenPar }
	'+'            { TokenBra }
	'*'            { TokenSta }
	';'            { TokenPre }
	','            { TokenCom }
	'('            { TokenOrb }
	')'            { TokenCrb }
	'['            { TokenCtb }
	']'            { TokenCte }
	"tau"          { TokenTau }
	"do"           { TokenJmp }
	"system"       { TokenSys }
	"of"           { TokenDef }
	"end"          { TokenStp }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_sysgrammar rule  0
	Sys             rule  1
	Mdec            rules 2, 3
	D               rule  4
	M               rules 5, 6
	cho             rules 7, 8
	B               rules 9, 10, 11, 12, 13, 14
	pre             rules 15, 16, 17, 18
	ptps            rules 19, 20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"system"       shift, and enter state 2

	Sys            goto state 3

State 1


	"system"       shift, and enter state 2


State 2

	Sys -> "system" . str "of" ptps ':' Mdec            (rule 1)

	str            shift, and enter state 4


State 3

	%start_sysgrammar -> Sys .                          (rule 0)

	%eof           accept


State 4

	Sys -> "system" str . "of" ptps ':' Mdec            (rule 1)

	"of"           shift, and enter state 5


State 5

	Sys -> "system" str "of" . ptps ':' Mdec            (rule 1)

	str            shift, and enter state 7

	ptps           goto state 6

State 6

	Sys -> "system" str "of" ptps . ':' Mdec            (rule 1)

	':'            shift, and enter state 9


State 7

	ptps -> str .                                       (rule 19)
	ptps -> str . ',' ptps                              (rule 20)

	':'            reduce using rule 19
	','            shift, and enter state 8


State 8

	ptps -> str ',' . ptps                              (rule 20)

	str            shift, and enter state 7

	ptps           goto state 13

State 9

	Sys -> "system" str "of" ptps ':' . Mdec            (rule 1)

	str            shift, and enter state 12

	Mdec           goto state 10
	D              goto state 11

State 10

	Sys -> "system" str "of" ptps ':' Mdec .            (rule 1)

	%eof           reduce using rule 1


State 11

	Mdec -> D .                                         (rule 2)
	Mdec -> D . "||" Mdec                               (rule 3)

	"||"           shift, and enter state 15
	%eof           reduce using rule 2


State 12

	D -> str . '=' M                                    (rule 4)

	'='            shift, and enter state 14


State 13

	ptps -> str ',' ptps .                              (rule 20)

	':'            reduce using rule 20


State 14

	D -> str '=' . M                                    (rule 4)

	str            shift, and enter state 21
	'*'            shift, and enter state 22
	'('            shift, and enter state 23
	"tau"          shift, and enter state 24

	M              goto state 17
	cho            goto state 18
	B              goto state 19
	pre            goto state 20

State 15

	Mdec -> D "||" . Mdec                               (rule 3)

	str            shift, and enter state 12

	Mdec           goto state 16
	D              goto state 11

State 16

	Mdec -> D "||" Mdec .                               (rule 3)

	%eof           reduce using rule 3


State 17

	D -> str '=' M .                                    (rule 4)

	"||"           reduce using rule 4
	%eof           reduce using rule 4


State 18

	M -> cho .                                          (rule 5)
	cho -> cho . '+' B                                  (rule 8)

	"||"           reduce using rule 5
	'+'            shift, and enter state 32
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 19

	cho -> B .                                          (rule 7)

	"||"           reduce using rule 7
	'+'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 20

	B -> pre . ';' cho                                  (rule 9)
	B -> pre . ';' "end"                                (rule 10)
	B -> pre .                                          (rule 11)
	B -> pre . ';'                                      (rule 12)
	B -> pre . "do" str                                 (rule 13)

	"||"           reduce using rule 11
	'+'            reduce using rule 11
	';'            shift, and enter state 30
	')'            reduce using rule 11
	"do"           shift, and enter state 31
	%eof           reduce using rule 11


State 21

	pre -> str . '!' str                                (rule 15)
	pre -> str . '?' str                                (rule 16)

	'!'            shift, and enter state 28
	'?'            shift, and enter state 29


State 22

	M -> '*' . cho                                      (rule 6)

	str            shift, and enter state 21
	'('            shift, and enter state 23
	"tau"          shift, and enter state 24

	cho            goto state 27
	B              goto state 19
	pre            goto state 20

State 23

	B -> '(' . M ')'                                    (rule 14)

	str            shift, and enter state 21
	'*'            shift, and enter state 22
	'('            shift, and enter state 23
	"tau"          shift, and enter state 24

	M              goto state 26
	cho            goto state 18
	B              goto state 19
	pre            goto state 20

State 24

	pre -> "tau" . str                                  (rule 17)
	pre -> "tau" .                                      (rule 18)

	str            shift, and enter state 25
	"||"           reduce using rule 18
	'+'            reduce using rule 18
	';'            reduce using rule 18
	')'            reduce using rule 18
	"do"           reduce using rule 18
	%eof           reduce using rule 18


State 25

	pre -> "tau" str .                                  (rule 17)

	"||"           reduce using rule 17
	'+'            reduce using rule 17
	';'            reduce using rule 17
	')'            reduce using rule 17
	"do"           reduce using rule 17
	%eof           reduce using rule 17


State 26

	B -> '(' M . ')'                                    (rule 14)

	')'            shift, and enter state 39


State 27

	M -> '*' cho .                                      (rule 6)
	cho -> cho . '+' B                                  (rule 8)

	"||"           reduce using rule 6
	'+'            shift, and enter state 32
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 28

	pre -> str '!' . str                                (rule 15)

	str            shift, and enter state 38


State 29

	pre -> str '?' . str                                (rule 16)

	str            shift, and enter state 37


State 30

	B -> pre ';' . cho                                  (rule 9)
	B -> pre ';' . "end"                                (rule 10)
	B -> pre ';' .                                      (rule 12)

	str            shift, and enter state 21
	"||"           reduce using rule 12
	'+'            reduce using rule 12
	'('            shift, and enter state 23
	')'            reduce using rule 12
	"tau"          shift, and enter state 24
	"end"          shift, and enter state 36
	%eof           reduce using rule 12

	cho            goto state 35
	B              goto state 19
	pre            goto state 20

State 31

	B -> pre "do" . str                                 (rule 13)

	str            shift, and enter state 34


State 32

	cho -> cho '+' . B                                  (rule 8)

	str            shift, and enter state 21
	'('            shift, and enter state 23
	"tau"          shift, and enter state 24

	B              goto state 33
	pre            goto state 20

State 33

	cho -> cho '+' B .                                  (rule 8)

	"||"           reduce using rule 8
	'+'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 34

	B -> pre "do" str .                                 (rule 13)

	"||"           reduce using rule 13
	'+'            reduce using rule 13
	')'            reduce using rule 13
	%eof           reduce using rule 13


State 35

	cho -> cho . '+' B                                  (rule 8)
	B -> pre ';' cho .                                  (rule 9)

	"||"           reduce using rule 9
	'+'            reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 36

	B -> pre ';' "end" .                                (rule 10)

	"||"           reduce using rule 10
	'+'            reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 37

	pre -> str '?' str .                                (rule 16)

	"||"           reduce using rule 16
	'+'            reduce using rule 16
	';'            reduce using rule 16
	')'            reduce using rule 16
	"do"           reduce using rule 16
	%eof           reduce using rule 16


State 38

	pre -> str '!' str .                                (rule 15)

	"||"           reduce using rule 15
	'+'            reduce using rule 15
	';'            reduce using rule 15
	')'            reduce using rule 15
	"do"           reduce using rule 15
	%eof           reduce using rule 15


State 39

	B -> '(' M ')' .                                    (rule 14)

	"||"           reduce using rule 14
	'+'            reduce using rule 14
	')'            reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 20
Number of non-terminals: 9
Number of states: 40
